import { motion } from 'framer-motion';
import React, { useState } from 'react';
// ðŸ’¥ NEW: Import the useTranslation hook
import { useTranslation } from 'react-i18next'; 

// --- Local Icon Definitions (Ensuring no external lucide-react dependency) ---

const IconWrapper = ({ children, className, ...props }) => (
Â  <svg
Â  Â  xmlns="http://www.w3.org/2000/svg"
Â  Â  width="24"
Â  Â  height="24"
Â  Â  viewBox="0 0 24 24"
Â  Â  fill="none"
Â  Â  stroke="currentColor"
Â  Â  strokeWidth="2"
Â  Â  strokeLinecap="round"
Â  Â  strokeLinejoin="round"
Â  Â  className={className}
Â  Â  {...props}
Â  >
Â  Â  {children}
Â  </svg>
);

const SettingsIcon = (props) => (
Â  <IconWrapper {...props}>
Â  Â  <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.47a2 2 0 0 1-1.44 1.83l-.71.3c-1.21.64-2 1.94-2 3.3v.8c0 1.36.79 2.66 2 3.3l.71.3a2 2 0 0 1 1.44 1.83v.47a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.47a2 2 0 0 1 1.44-1.83l.71-.3c1.21-.64 2-1.94 2-3.3v-.8c0-1.36-.79-2.66-2-3.3l-.71-.3a2 2 0 0 1-1.44-1.83V4a2 2 0 0 0-2-2z" />
Â  Â  <circle cx="12" cy="12" r="3" />
Â  </IconWrapper>
);

const Target = (props) => (
Â  <IconWrapper {...props}>
Â  Â  <circle cx="12" cy="12" r="10" />
Â  Â  <circle cx="12" cy="12" r="6" />
Â  Â  <circle cx="12" cy="12" r="2" />
Â  </IconWrapper>
);

const Shield = (props) => (
Â  <IconWrapper {...props}>
Â  Â  <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z" />
Â  </IconWrapper>
);

const Home = (props) => (
Â  <IconWrapper {...props}>
Â  Â  <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
Â  Â  <polyline points="9 22 9 12 15 12 15 22" />
Â  </IconWrapper>
);

// --- MOCK PROFILE DATA (for standalone testing) ---
const mockProfile = {
Â  Â  role: 'Farmer',
Â  Â  legalName: 'Sameeâ€™s Organic Harvest LLC',
Â  Â  taxId: 'XX-1234567',
Â  Â  contactEmail: 'samee@farm2market.com',
Â  Â  pricingStrategy: 'Tiered based on volume',
Â  Â  deliveryRadius: '50 Miles',
Â  Â  // Mocking the navigate function for isolated testing
Â  Â  navigate: (route) => console.log(`Navigating to: ${route}`), 
};


// ------------------------------------
// SETTINGS COMPONENT (Control Center)
// ------------------------------------

const Settings = ({ profile = mockProfile, navigate = mockProfile.navigate }) => {
Â  const [activeTab, setActiveTab] = useState('account'); // 'account', 'market', 'security'
Â  // ðŸ’¥ NEW: Use the translation hook to get the 't' function
Â  const { t } = useTranslation(); 

Â  const TabButton = ({ id, label, Icon }) => (
Â  Â  <button
Â  Â  Â  onClick={() => setActiveTab(id)}
Â  Â  Â  className={`px-6 py-3 text-sm font-medium rounded-t-lg transition-all flex items-center gap-2 ${
Â  Â  Â  Â  activeTab === id
Â  Â  Â  Â  Â  ? 'bg-gray-100 dark:bg-gray-800 text-emerald-600 dark:text-emerald-400 border-b-2 border-emerald-600 dark:border-emerald-400'
Â  Â  Â  Â  Â  : 'text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100/50 dark:hover:bg-gray-800/50'
Â  Â  Â  }`}
Â  Â  >
Â  Â  Â  <Icon className="w-5 h-5" />
Â  Â  Â  {label}
Â  Â  </button>
Â  );

Â  // ðŸ’¥ UPDATED: The title prop for SectionCard needs to be passed *already translated* or translated inside.
Â  // I will translate the title inside SectionCard for simplicity, though passing a key is cleaner.
Â  // Let's keep it simple as requested and translate the content where it is used.
Â  const SectionCard = ({ title, children }) => (
Â  Â  <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg border border-gray-100 dark:border-gray-700 space-y-4">
Â  Â  Â  <h3 className="text-xl font-semibold text-gray-900 dark:text-white border-b pb-2 border-gray-100 dark:border-gray-700">{t(title)}</h3>
Â  Â  Â  {children}
Â  Â  </div>
Â  );
Â  
Â  // ðŸ’¥ UPDATED: The label prop for DisplayField needs to be passed *already translated*.
Â  const DisplayField = ({ label, value }) => (
Â  Â  <div className="flex justify-between items-center py-2 border-b border-gray-100 dark:border-gray-700 last:border-b-0">
Â  Â  Â  <span className="text-gray-600 dark:text-gray-400 text-sm font-medium">{t(label)}</span>
Â  Â  Â  <span className="text-gray-900 dark:text-white font-medium">{value}</span>
Â  Â  </div>
Â  );

Â  const TabContent = () => {
Â  Â  // Ensure a profile exists before trying to access its properties
Â  Â  const p = profile || mockProfile; 
Â  Â  
Â  Â  switch (activeTab) {
Â  Â  Â  case 'account':
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <div className="space-y-6">
Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for title prop */}
Â  Â  Â  Â  Â  Â  <SectionCard title="Business Details">
Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for label prop */}
Â  Â  Â  Â  Â  Â  Â  <DisplayField label="Legal Entity Name" value={p.legalName || t('N/A')} />
Â  Â  Â  Â  Â  Â  Â  <DisplayField label="Tax ID / EIN" value={p.taxId || t('N/A')} />
Â  Â  Â  Â  Â  Â  Â  <DisplayField label="Primary Contact Email" value={p.contactEmail} />
Â  Â  Â  Â  Â  Â  Â  <button className="text-emerald-600 dark:text-emerald-400 text-sm font-semibold hover:text-emerald-700 transition-colors">
Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for button text */}
Â  Â  Â  Â  Â  Â  Â  Â  {t('Update Business Info')}
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </SectionCard>
Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for title prop */}
Â  Â  Â  Â  Â  Â  <SectionCard title="User Credentials">
Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for paragraph text (including variable context) */}
Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500 dark:text-gray-400 text-sm">{t('Last password change: 3 months ago')}</p>
Â  Â  Â  Â  Â  Â  Â  <button className="bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for button text */}
Â  Â  Â  Â  Â  Â  Â  Â  {t('Change Password')}
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </SectionCard>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  );
Â  Â  Â  case 'market':
Â  Â  Â  Â  // Conditional rendering based on role (e.g., only Farmers see this tab)
Â  Â  Â  Â  if (p.role !== 'Farmer') {
Â  Â  Â  Â  Â  Â  return <p className="pt-8 text-center text-gray-500 dark:text-gray-400">{t('Marketplace configuration is only available for **Farmer** accounts.')}</p>;
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <div className="space-y-6">
Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for title prop */}
Â  Â  Â  Â  Â  Â  <SectionCard title="Pricing & Sales Strategy">
Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for label prop */}
Â  Â  Â  Â  Â  Â  Â  <DisplayField label="Pricing Model" value={p.pricingStrategy} />
Â  Â  Â  Â  Â  Â  Â  <DisplayField label="Preferred Delivery Radius" value={p.deliveryRadius} />
Â  Â  Â  Â  Â  Â  Â  <div className="mt-4">
Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for span text */}
Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-gray-600 dark:text-gray-400 text-sm font-medium block mb-2">{t('Preferred Buyer Segments')}</span>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-wrap gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage inside map function for displayed text */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  {['Wholesalers', 'Restaurants', 'CSA Boxes'].map(segment => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span key={segment} className="bg-lime-100 dark:bg-lime-900 text-lime-800 dark:text-lime-300 text-xs px-3 py-1 rounded-full">{t(segment)}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <button className="text-emerald-600 dark:text-emerald-400 text-sm font-semibold hover:text-emerald-700 transition-colors">
Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for button text */}
Â  Â  Â  Â  Â  Â  Â  Â  {t('Define Pricing Rules')}
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </SectionCard>
Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for title prop */}
Â  Â  Â  Â  Â  Â  <SectionCard title="Shipping & Logistics">
Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for label and value props (if the value is a translatable string) */}
Â  Â  Â  Â  Â  Â  Â  Â  <DisplayField label="Fulfillment Partner" value={t('Local Courier Network')} />
Â  Â  Â  Â  Â  Â  Â  Â  <button className="text-emerald-600 dark:text-emerald-400 text-sm font-semibold hover:text-emerald-700 transition-colors">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for button text */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {t('Manage Zones')}
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </SectionCard>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  );
Â  Â  Â  case 'security':
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <div className="space-y-6">
Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for title prop */}
Â  Â  Â  Â  Â  Â  <SectionCard title="API Integrations">
Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for paragraph text */}
Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500 dark:text-gray-400 text-sm mb-4">{t('Integrate your inventory software with Farm2Market using API keys.')}</p>
Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for label prop */}
Â  Â  Â  Â  Â  Â  Â  <DisplayField label="Inventory Sync API Key" value="********-****-42c2-b7e1-********" />
Â  Â  Â  Â  Â  Â  Â  <button className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for button text */}
Â  Â  Â  Â  Â  Â  Â  Â  {t('Revoke Key')}
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </SectionCard>
Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for title prop */}
Â  Â  Â  Â  Â  Â  <SectionCard title="Security Preferences">
Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for label and value props (since 'Enabled' is translatable content) */}
Â  Â  Â  Â  Â  Â  Â  <DisplayField label="Two-Factor Authentication" value={t('Enabled')} />
Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for paragraph text */}
Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500 dark:text-gray-400 text-sm">{t('Last security check: Today')}</p>
Â  Â  Â  Â  Â  Â  </SectionCard>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  );
Â  Â  Â  default:
Â  Â  Â  Â  return null;
Â  Â  }
Â  };


Â  return (
Â  Â  <motion.div 
Â  Â  Â  initial={{ opacity: 0, x: 30 }}
Â  Â  Â  animate={{ opacity: 1, x: 0 }}
Â  Â  Â  className="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8 bg-gray-50 dark:bg-gray-900 min-h-screen" // Added bg and min-h for context
Â  Â  >
Â  Â  Â  {/* Header with Back Button */}
Â  Â  Â  <div className="mb-8 pt-10"> {/* Added pt-10 to account for Header.jsx fixed header */}
Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  onClick={() => navigate('/profile')} // Changed to use the standard react-router route
Â  Â  Â  Â  Â  className="flex items-center gap-2 text-emerald-600 dark:text-emerald-400 hover:text-emerald-700 transition-colors font-medium mb-4"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m15 18-6-6 6-6"/></svg>
Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for button text */}
Â  Â  Â  Â  Â  {t('Back to Profile')}
Â  Â  Â  Â  </button>

Â  Â  Â  Â  <h1 className="text-4xl font-extrabold text-gray-900 dark:text-white mb-2 flex items-center gap-3">
Â  Â  Â  Â  Â  <SettingsIcon className="w-8 h-8 text-emerald-600 dark:text-emerald-400"/> {/* ðŸ’¥ t() usage for heading text */}
Â  Â  Â  Â  Â  {t('Farm Operations Control Center')}
Â  Â  Â  Â  </h1>
Â  Â  Â  Â  <p className="text-gray-600 dark:text-gray-400">
Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for paragraph text */}
Â  Â  Â  Â  Â  {t('Manage your business compliance, marketplace strategy, and system integrations.')}
Â  Â  Â  Â  </p>
Â  Â  Â  </div>

Â  Â  Â  {/* Tabs */}
Â  Â  Â  <div className="border-b border-gray-200 dark:border-gray-700 mb-6">
Â  Â  Â  Â  <div className="flex -mb-px space-x-4 overflow-x-auto">
Â  Â  Â  Â  Â  {/* ðŸ’¥ t() usage for label prop values */}
Â  Â  Â  Â  Â  <TabButton id="account" label={t('Account & Compliance')} Icon={Home} />
Â  Â  Â  Â  Â  <TabButton id="market" label={t('Marketplace Configuration')} Icon={Target} />
Â  Â  Â  Â  Â  <TabButton id="security" label={t('Data & Security')} Icon={Shield} />
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* Content */}
Â  Â  Â  <motion.div
Â  Â  Â  Â  key={activeTab}
Â  Â  Â  Â  initial={{ opacity: 0, y: 10 }}
Â  Â  Â  Â  animate={{ opacity: 1, y: 0 }}
Â  Â  Â  Â  transition={{ duration: 0.3 }}
Â  Â  Â  Â  className="mt-6"
Â  Â  Â  >
Â  Â  Â  Â  {TabContent()}
Â  Â  Â  </motion.div>
Â  Â  </motion.div>
Â  );
};

export default Settings;